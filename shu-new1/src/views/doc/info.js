export const info = [
    {
        title: '接口自动化',
        children: [
            {
                name: 'pytest',
                content: ``
            },
            {
                name: 'requests',
                content: ''
            },
            {
                name: 'PyYAML',
                content: ''
            },
            {
                name: 'faker',
                content: ''
            },
            {
                name: 'allure',
                content: ''
            },
        ]
    },
    {
        title: '面向对象',
        children: [
            {
                name: '类',
                content: `<p>类与对象</p>
        <p>什么是面向对象，面向就是就是字面意思。脸朝向
          <br>朝向哪？朝向对象。
          <br>那什么是对象。一切皆对象。
          <br>现实生活中，无论什么，一个人也好，一个物品也好。都可以用“一个东西”代替
          <br>所以面向对象的意思就是把 脸朝向一个东西。。
        </p>
        <p>开玩笑，重来。面向的意思确实就是脸朝向某个方向。意思是让你写代码的时候往那个方向走，尽量往那边靠。
          <br>往哪边靠？对象上靠。对象是什么。记得怎么描述一个人吗？
          <br>人有身高，体重，年龄等特征。
          <br>人还会走路，会吃饭。
          <br>身高体重特征，其实也就是一个人属性。走路，吃饭是他的行为。代码里叫方法。
          <br>所以对象是什么，先简单看，对象就是把“一个东西”抽象成属性，和方法。
        </p>
        <p>
          ok，先来看怎么把一个东西在python代码里抽象成一个对象和一些关键字
        </p>
        <pre>
          <coed>
            class People():  //class 关键字 用于创建一个类。就像def 用于创建一个函数一样。
              name='肖战',    // 定义类的属性
              hair=['10厘米','11厘米']
              def shit(self):   // 定义类的方法
                print(self.name+'在**')

            a = People()   // 创建一个类的实例 People() 就是返回一个类的实例
            a.shit()       // 调用类的方法
            a.name         // 访问类的属性
          </coed>
        </pre>
        <p>
          这就是创建的一个对象，这里只有一个属性，一个方法。但其实只要想。可以把一个人所有的属性列出来。
          <br>比如 hair 属性,在这里是一个列表，因为头发有很多嘛，所以用列表来装，然后列表里是的值是每根头发的长度。属性可以是任何值，甚至是一个类。
        </p>

        <p>
          <span class="stress">为什么要这么做！为什么要把东西 抽象成对象。</span>
        </p>
        <p>
          <span class="stress">因为用这种模式，可以模拟世界上的任何东西，所有东西。都可以用属性，方法的模式，抽象成一个对象。</span>
        </p>
        <p>无论什么，一张桌子，它有长宽高的属性。一根头发，它有长度，是不是分叉了。</p>
        <p>
          并且，面向对象这种模式很易读。因为其实这种模式写出来的代码其实是非常贴近现实生活的。
          借用一个例子。
        </p>
        <p>

          <br>问题： 洗衣机里面放有脏衣服，怎么洗干净？

          <br>面向过程的解决方法：

          <br>1、执行加洗衣粉方法；

          <br>2、执行加水方法；

          <br>3、执行洗衣服方法；

          <br>4、执行清洗方法；

          <br>5、 执行烘干方法；

          <br>以上就是将解决这个问题的过程拆成一个个方法（是没有对象去调用的），通过一个个方法的执行来解决问题。

          <br>面向对象的解决方法：

          <br><br>1、我先弄出两个对象：“洗衣机”对象和“人”对象

          <br>2、针对对象“洗衣机”加入一些属性和方法：“洗衣服方法”“清洗方法”、“烘干方法”

          <br>3、针对对象“人”加入属性和方法：“加洗衣粉方法”、“加水方法”

          <br>4、然后执行

          <br>人.加洗衣粉()

          <br>人.加水()

          <br>洗衣机.洗衣服()

          <br>洗衣机.清洗()

          <br>洗衣机.烘干()

          <br>解决同一个问题 ，面向对象编程就是先抽象出对象，然后用对象执行方法的方式解决问题。
        </p>

        <p>
          面向对象和面向过程 都是代码的一种设计模式。面向对象 就是以对象为基础。面向过程以 过程为基础，也就是从上往下执行。
        </p>



        <p>其实面向对象并不难。语法上就是 class 类名(): 定义一个类。和 def 定义方法一样。
          <br>然后在这个类里定义的变量是这个类的属性。在这个类里定义的函数是类的方法。
          <br>类被定义后是不能直接用的。需要实例化。语法是 类名跟一个括号 类名()
          <br>类名()就是返回一个类的实例，实例就可以通过 实例.属性  实例.方法这样的语法访问类的属性和方法
          <br>class 类名(): 就是在定义一个摸具，而 类名() 就是在用材料填充摸具，并返回一个真正可用的实例。材料就是传递的参数。
        </p>
        <p class="stress">
          其实面向对象并不难，定义一个类就是一个对象摸具，对象里可以定义属性和方法，用来描述这个对象有什么特征，能做什么事情
        </p>
        <p class="stress">
          月饼摸具是不可以吃的，但月饼是可以吃的对吧。所以要使用这些属性和方法需要先实例化。实例化后就可以使用 实例.属性 实例.方法的模式访问类里定义属性和方法了
        </p>`
            },
            {
                name: '封装',
                content: ''
            },
            {
                name: '继承',
                content: ''
            },
            {
                name: '多态',
                content: ''
            },
        ]
    },
    {
        title: 'Python 主体',
        children: [
            {
                name: '简介',
                content: '<p>python 是一门解释型，动态类型的编程语言</p>\n' +
                    '        <p>当然还有其他标签，不重要。先了解一下什么是解释型和动态类型。</p>\n' +
                    '        <p>解释型语言\n' +
                    '          <br>\n' +
                    '          <br>关于解释型相关的定义一共又俩种。分别是 解释性语言 和 编译型语言。\n' +
                    '          <br>解释型的意思是 你的代码写出来后不需要编译就可以直接运行。\n' +
                    '          <br>聪明的你肯定想到了，那代码写出来当然要可以运行，不能运行不就是报错了嘛？\n' +
                    '          <br>并不是，还有和解释型不同的另一种类型的语言。叫编译型语言。比如C，C++。它们的代码写出来后需要先编译成文件才能运行。比如我们常见的 .exe 文件。就是编译打包后的文件。\n' +
                    '          <br>其实 python 代码写出来后也是要编译才能运行的。只是它不用预编译。它是在运行时才通过 python解释器 进行编译\n' +
                    '          <br>所以，所谓的解释型 和 编译型 语言。都是需要编译的，只是编译的时机不同。\n' +
                    '        </p>\n' +
                    '        <p>\n' +
                    '          动态类型。\n' +
                    '          <br>\n' +
                    '          <br>关于动态类型这种定义一共又四种。分别是 动态/静态 类型， 强/弱 类型。\n' +
                    '          <br>动态和静态 是相对的，强和弱是相对的。\n' +
                    '          <br>动态类型，其实就是这门语言规定 代码里在编译之前 不需要 确定变量的数据类型。对应的 静态类型 是 需要确定，不然会编译不通过。\n' +
                    '          <br>\n' +
                    '          <br>而强类型。则是指这门语言的 变量 的数据类型，如果不强制转换（认为写代码转换），那么这个变量的数据类型是不会改变的。弱类型则是可能会改变的（隐式转换）。\n' +
                    '          <br>不懂这个概念可能会有点迷茫，不急。。这里还没想好******下次补充 还是协议，规矩的事。解决某些问题，设立的某些规矩。\n' +
                    '        </p>\n' +
                    '        <pre>\n' +
                    '          <code>\n' +
                    '            a = "17" - 11\n' +
                    '            print(a)\n' +
                    '          </code>\n' +
                    '        </pre>\n' +
                    '        <p>python是强类型语言，上面这行代码是会报错的！因为用字符串的“17” 和 数字11 做减法运算。\n' +
                    '          <br>但在弱类型语言里，它可以正确的运算出来等于 6。\n' +
                    '          <br>原因是弱类型语言它在做这个运算的时候，它发现 减号俩边一个是字符串，一个是数字。它会自动把数据类型转换成一样的，才会再去做运算。这就是<span class="stress">隐式转换。</span>\n' +
                    '          <br>python 这种强类型语言，如果发现类型不一致，或者这个数据类型不能用这个运算符。它则是会直接抛出bug，让你去解决。如果你要算的话你就得手动写一句代码 int() 函数转换类型。这就是<span class="stress">强制转换。</span>\n' +
                    '        </p>\n' +
                    '\n' +
                    '        <p>总结：\n' +
                    '          <br>1、python 是无需“提前编译”，它是一边编译一边运行的 解释型语言。\n' +
                    '          <br>2、python 是动态类型，不需要在编译前就确定类型。\n' +
                    '          <br>3、python 是强类型语言，如果要改变一个 变量的数据类型 只能强制转换。\n' +
                    '          <br>\n' +
                    '          <br>其实这些东西 都是人为了解决一些问题，在某些时候更方便使用。所立下的规矩。\n' +
                    '          <br>比如第1条，不需要 提前编译，直接拿着写好的代码文件就可以直接运行，写好了就可以直接用，方便传播，对平台的依赖小一些。它就比c++那些需要提前编译的语言适用面更广。比如APP需要提前下载使用，而H5可以直接打开。\n' +
                    '          <br>第3条 就更离谱了，强类型语言，它最大的作用就是尽量保证少出bug。所立下的规矩。\n' +
                    '        </p>\n' +
                    '        <p>建议\n' +
                    '          <br>这些大致了解一下，知道它设立 这种规矩 是要解决什么问题，知道可能会出什么BUG就行，不必太深究。\n' +
                    '        </p>'
            },
            {
                name: '变量',
                content: '<P>\n' +
                    '          <el-tag>数字</el-tag>\n' +
                    '          <el-tag>字符串</el-tag>\n' +
                    '          <el-tag>列表</el-tag>\n' +
                    '          <el-tag>元组</el-tag>\n' +
                    '          <el-tag>字典</el-tag>\n' +
                    '          <el-tag>集合</el-tag>\n' +
                    '        </P>\n' +
                    '        <p>变量与数据类型</p>\n' +
                    '\n' +
                    '        <pre>\n' +
                    '          <code>\n' +
                    '            a = 1                                    // 数字\n' +
                    '            b = \'王琪\'                                // 字符串\n' +
                    '            c = [\'王琪\',\'吴彦祖\',\'胡歌\',\'彭于晏\']        // 列表\n' +
                    '            d = (\'a\',\'b\',\'c\')                        // 元组\n' +
                    '            e = {\'height\':\'180cm\',\'age\':\'18\'}        // 字典\n' +
                    '            f = {\'王琪\',\'吴彦祖\',\'胡歌\'}                // 集合\n' +
                    '          </code>\n' +
                    '        </pre>\n' +
                    '\n' +
                    '        <p>\n' +
                    '          数字类型：\n' +
                    '          <br>包含三个子项，分别是 整数int 浮点数float。\n' +
                    '          <br>一般主要用于计算。\n' +
                    '        </p>\n' +
                    '        <p>字符串：\n' +
                    '          <br>属于序列的一种，就像整数int和浮点数float都是数字。\n' +
                    '          <br>一般用于文字输入输出，是很万能的一个数据格式。\n' +
                    '          <br>\n' +
                    '          <br>字符串，列表，元组，这三个是python里的序列了。\n' +
                    '          <br>序列最长利用到的特性就是可迭代，有顺序，可以通过下标访问了。\n' +
                    '          <br>而它们三个都是序列所以他们也有这些特性。\n' +
                    '        </p>\n' +
                    '        <p>\n' +
                    '          列表：\n' +
                    '          <br>属于序列的一种\n' +
                    '          <br>一般用于一组重复相同的数据，例如，公司有20个人。为了方便使用就放一个变量里。\n' +
                    '          <br>一般代码里用于for 或while 循环里访问所有值。或者使用下标访问单个值\n' +
                    '          <br>特点是可以用下标访问，可迭代（循环），有顺序。如上面代码：彭于晏排名第四。\n' +
                    '        </p>\n' +
                    '        <p>元组：\n' +
                    '          <br>属于序列的一种\n' +
                    '          <br>其实元组可以直接看成不可变的数组。\n' +
                    '          <br>特点是开始定义它之后就不能对它的值进行修改了，其他和序列差不多\n' +
                    '        </p>\n' +
                    '        <p>\n' +
                    '          字典：\n' +
                    '          <br>由多个 键值对 组成，通过键名来访问值。\n' +
                    '          <br>字典与列表的不同在于，列表更倾向于存放 重复相同的数据。比如20个员工列表。他们都是员工，所以放列表里合适。\n' +
                    '          <br>而字典 更倾向于 不同意义的值。比如某个员工，他年龄，身高，体重，姓名等等。这些值提取不出什么共同点，所以通过键值对的方式去存放比较合适。\n' +
                    '          <br>特点是通过 .键名的方式访问 例如：a.age。\n' +
                    '        </p>\n' +
                    '        <p>\n' +
                    '          集合：\n' +
                    '          <br>集合也是序列的一种\n' +
                    '          <br>但它是无序的。。\n' +
                    '          <br>说实话，集合除了一些方法在某些时候很方便，比如去重，查看是否包含。比如我要找王琪是不是属于某个公司。但我实在没想出来它具体的应用场景，因为这些事字典和列表都可以代替。\n' +
                    '          <br>特点，无序的可迭代对象，实在有点扯。也就是说循环的时候压根不知道第一个，第二个循环的是谁。是随机的。如上面代码，大致意思就是排名不分先后。\n' +
                    '        </p>\n' +
                    '\n' +
                    '        <p>\n' +
                    '          这是 python 提供的六种数据类型。同样的创造他们就是为了各自解决某些方面的事的。比如数字用于计算，比如列表用于循环。等等。。\n' +
                    '          <br>\n' +
                    '          <br>它们的区别在于 存储方式不同，可用的属性和方法不同。\n' +
                    '          <br>存储方式不同不多说了。\n' +
                    '          <br>可用的属性和方法不同，比如说序列类型，都可以通过len方法获得 它的长度。\n' +
                    '          <br>数字有很多用于计算的方法，比如abs() 绝对值 ceil()向上取整等等。\n' +
                    '          <br>字符串 有转换大小写等\n' +
                    '          <br>列表有新增删除列表项等\n' +
                    '          <br>这里需要知道它们都有哪些方法，怎么用。下面是每个数据类型的常用的比较重要的方法\n' +
                    '        </p>\n' +
                    '\n' +
                    '        <p>常用方法******</p>\n' +
                    '\n' +
                    '        <p>\n' +
                    '          上面说的是 python 提供记得基础类型。它们都是为了解决某个方面的问题，创造出来的。你也可以创造自己的数据类型。\n' +
                    '          <br>比如队列，先进先出。栈，先进后出（羽毛球桶），链表等。\n' +
                    '          <br>现在不用管它们怎么实现。理解一个概念。\n' +
                    '          <br>设计 队列 这个数据类型，就是方便解决 排队这种需求场景下的问题。\n' +
                    '        </p>'
            },
            {
                name: '逻辑控制',
                content: {}
            },
            {
                name: '函数',
                content: {}
            },
            {
                name: '其他规则',
                content: {}
            },
        ]
    },
    {
        title: '计算机',
        children: [
            {
                name: '语言',
                content: '<p>计算机工作原理和语言的关系</p>\n' +
                    '        <p>想一想计算机能做什么？</p>\n' +
                    '        <p>先抛开一切，计算机只有0和1对吧。那么不管你在计算机上做什么事情。打游戏，看电视什么都好。</p>\n' +
                    '        <p>最终</p>\n' +
                    '        <p>计算机都是在对 那无数个 0和1 做增删改查。</p>\n' +
                    '        <p>对吧，计算机cpu 只有0和1呀。那些协议，都是把这些01变成 人能看懂的东西。</p>\n' +
                    '        <p>比如，一个电影。存成MP4格式文件。500M吧</p>\n' +
                    '        <p>这里提一下，计算机里一个0或1等于 1 bit。bit是计算机里最小的单位了。\n' +
                    '          <br>完整单位换算如下。\n' +
                    '          <br>8bit = 1B\n' +
                    '          <br>1024B = 1KB\n' +
                    '          <br>1024KB = 1MB\n' +
                    '          <br>1024MB = 1GB\n' +
                    '          <br>1024GB = 1TB\n' +
                    '          <br>上面还有...但最小就是从 bit 开始了。因为bit 等于 一个0或1嘛。\n' +
                    '          <br>M就是MB的意思，也不用区分大小写mb也行的\n' +
                    '        </p>\n' +
                    '        <p>说回电影，一个500M的电影文件，存在电脑里，意思就是这个电影文件需要占用 500 * 1024 * 1024 * 8=4194304000个0</p>\n' +
                    '        <p>别算了，41亿9千多万</p>\n' +
                    '        <p>而电影的mp4格式也是一种协议呀。这个协议的作用，简单来说就是把41亿个 01 解析成人类能看懂的画面。</p>\n' +
                    '        <p>所以，计算机做的事情简单概括一下就俩个\n' +
                    '          <span class="stress">\n' +
                    '          <br>1、对 0 和 1 做增删改查\n' +
                    '          <br>2、通过各种协议把 01 转变成人能看懂的东西，或者相反，把人能看懂的东西转变成 01 存起来。\n' +
                    '            </span>\n' +
                    '        </p>\n' +
                    '        <p>这是计算机的工作原理，再简单说一下语言的发展，这个了解，知道一下就行，和上面的第二条差不多，其实是一个意思</p>\n' +
                    '        <p>\n' +
                    '          计算机只有0和1对吧。0和1是什么，是一个开关对吧。\n' +
                    '          <br>所以从硬件层面来说，人能操作的就是一个个的去开“开关”，关“开关”\n' +
                    '          <br>但一个个去开关太麻烦了，人们就把开关的操作封装了一下。比如一次可以把所有开关都打开或关闭。或者打开一半等等。。\n' +
                    '          <br>这就是 汇编，但是汇编还是太晦涩难懂的，然后用汇编写了 C 语言。\n' +
                    '          <br>然后人们还是觉得C语言写代码有点麻烦，又封装了一下变成 C++。\n' +
                    '          <br>语言的发展就是这样的。。嫌麻烦，然后封装一下。。\n' +
                    '          <br>汇编 => C/C++ => 其他语言\n' +
                    '        </p>'
            },
            {
                name: '协议',
                content: '<p><span class="stress">计算机就是由无数的协议堆砌而成！</span></p>\n' +
                    '        <p>协议，也可以说是约定好的一种制度，一个规矩，一个标准。大家商量好的，都按这个来。就好像 “我” = “me” 一样。</p>\n' +
                    '        <p>计算机由 0 和 1 组成，连 2 都没有，理论上来说计算机只能表示 0 和 1。<br>\n' +
                    '          但人发明了二进制，用进位的方式来表示更多的数字。二进制立了一个规矩。虽然我只有 0 和 1 ，但我有很多个0和1。所以我用俩位数字 “10” 来表示 2。“11”表示 3。依次类推\n' +
                    '          <br>二进制就是计算机里第一个，也是最基础的协议。\n' +
                    '          <br>二进制让计算机拥有了 用无数个 0 和 1 表示 无数个数字的能力。\n' +
                    '        </p>\n' +
                    '\n' +
                    '        <p>有了无数个数字，事情就变得简单有趣起来。\n' +
                    '          <br>小时候考试有没有作过弊，一个手指选A，俩个手指选B。。。\n' +
                    '          <br>或者，有没有和小伙伴有过什么密语。\n' +
                    '          <br>其实这就是计算机的原理，用一些东西代指某些东西。\n' +
                    '          <br>计算机里只有 0 和 1，但可以用二进制表示其他数字。然后可以用这些数字表示其他意思。\n' +
                    '          <br>比如汉字，英文，符号等等。本质都是数字，然后用数字去字符集里找对应的值（ASCII，Unicode，GB/T 2312-1980，它们三个都是字符集，只是收录的字符不同，这个只要知道字符其实都是用数字从这些表里找出来的就行）\n' +
                    '          <br>字符集就是 编号后的字符集合，把 abcd，0123，周五阵亡。这些字每个编上独一无二的号码（数字）。然后可以通过数字来一一对应\n' +
                    '          <br>因此，Python和大部分语言中字符串可以比较大小。因为他们本质上是数字。ord() 函数 可以将字符串获得传入字符串的 字符值！\n' +
                    '          <br>\n' +
                    '        </p>\n' +
                    '        <p>\n' +
                    '          有了文字，就可以组成关键字了，就可以开始写代码了呀。Python语言里的大部分关键字其实都是字面意思\n' +
                    '          <br>比如 if 。翻译成中文就是如果的意思 python 里 if 后面跟一个条件语句，如果为真就执行，为假就不执行。\n' +
                    '          <br>所以 if age>15:  外国人看就是 （如果 年龄 大于 15：）\n' +
                    '          <br>\n' +
                    '          <br>\n' +
                    '          所以，其实很简单，计算机嘛，只有01。于是用0和1来表示数字，然后用数字通过字符集来表示文字。然后。。。\n' +
                    '        </p>\n' +
                    '        <p>\n' +
                    '          <span class="stress">这章很重要。理解协议，理解 计算机 是怎么通过一个个协议从 01 变得 无所不能。</span>\n' +
                    '        </p>'
            },
            {
                name: '进制',
                content: '<p>\n' +
                    '          <el-tag>二进制</el-tag>\n' +
                    '          <el-tag>八进制</el-tag>\n' +
                    '          <el-tag>十进制</el-tag>\n' +
                    '          <el-tag>十六进制</el-tag>\n' +
                    '        </p>\n' +
                    '        <p>官方解释：进制也就是进位计数制，是人为定义的带进位的计数方法，对于任何一种进制---X进制，就表示每一位上的数运算时都是逢X进一位。 十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p>\n' +
                    '        <p>进制，就是在数数的时候，每碰到一个固定的数字就需要往前进一位的制度；简称为“进制”。</p>\n' +
                    '        <p>\n' +
                    '          比如十进制，数字是0~9，我从0开始数起。0,1,2...8,9。数到 9 正常再往下是数不下去了。因为一共就 0~9 十位数字。\n' +
                    '          这个时候就需要往前进一个 1 。也就是 “十位加一，个位归零”。 其实这个 “1” 就代表着我已经把 0~9 数过一遍了，接下来我是数第二遍了。第二遍数完，\n' +
                    '          又往前（十位）进一个 1 ，与之前（十位）的1相加。如果十位也加到 9 了。就开始往百位加一。类推。\n' +
                    '        </p>\n' +
                    '        <p>\n' +
                    '          二进制也是一样的。二进制数字只有 0~1 。所以每次数到 1 之后，再要往下数，就往要前加 1 。\n' +
                    '          二进制与日常用的十进制唯一不同的就是 缝几进一 的不同了。理解它们的共同点。\n' +
                    '        </p>\n' +
                    '        <p>常用的进制有二进制，八进制，十进制，十六进制。八进制其实接触的少。十六进制接触的多的是 颜色的值。如#FFF。F就是十六进制的十五。0~9 a(10) , b(11),c,d,e,f(15)</p>\n' +
                    '        <p>同时在Python里可以直接写出不同进制的数字，只是需要加一些前缀</p>\n' +
                    '        <pre>\n' +
                    '          <code>\n' +
                    '    a = 0b10001 // 二进制 17 前缀0b 后面跟0~1 <br>\n' +
                    '    b = 0o21    // 八进制 17 前缀0o 后面跟0~7的数字 <br>\n' +
                    '    c = 17      // 十进制 17 <br>\n' +
                    '    d = 0x11    // 十六进制 17 前缀0x 后面跟 0~9 a~f\n' +
                    '          </code>\n' +
                    '        </pre>\n' +
                    '        <p>思考一下，0b10，0o10，0x10等于十进制的多少，总结一下规律</p>'

            },
        ]
    }
]